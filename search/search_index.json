{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tiny Glade modding documentation","text":"<p>Tiny Glade is a small diorama builder where you doodle whimsical castles, cozy cottages &amp; romantic ruins. Explore gridless building chemistry as the game adorns your glades with procedural detail. No management, combat or goals: just kick back and turn forgotten meadows into lovable dioramas.  </p> <p>Tiny Glade, developed and published by Pounce Light, was released on September 23, 2024. The game is crafted using the Rust programming language and utilizes the Bevy engine.  </p> <p>Currently, there is no official mod support. However, an active modding community thrives on the game's Discord server. To join and engage with fellow modders, you can access the Discord server through the in-game menu. And a Reddit to get news about discoveries and developments.</p>"},{"location":"#game-knowledge","title":"Game Knowledge","text":"<p>We gather all our knowlege about the game mecanics below we dig so far - the overall Game Structure - The display of the Meshes - The way how Glade are saved </p>"},{"location":"#modding-tools","title":"Modding Tools","text":""},{"location":"#contact-and-contribution","title":"Contact and Contribution","text":""},{"location":"game-knowledge/game-structure/","title":"Game Structure","text":""},{"location":"game-knowledge/game-structure/#how-it-works","title":"How It Works","text":"<p>The game is developed in Rust and utilizes the Bevy engine (Bevy Engine). The music is managed with FMOD (FMOD Documentation), which allows for evolutive and dynamic soundscapes.</p>"},{"location":"game-knowledge/game-structure/#game-files","title":"Game Files","text":"<p>The main executable file is <code>TinyGlade.exe</code>. This binary contains the compiled Rust code where all the magic happens.</p>"},{"location":"game-knowledge/game-structure/#assets-folder","title":"<code>Assets</code> Folder","text":"<p>The <code>Assets</code> folder contains all the necessary game resources, organized into subdirectories:</p> <ul> <li><code>Audio/</code>: This directory holds the game\u2019s music and sound effects. The files are in an bank format, they are openable with the fmod studio free for small organization &lt; $200k.</li> <li><code>Meshes/</code>: This directory contains all the 3D models used in the game. The assets are categorized into subfolders such as <code>Decorations/</code> and <code>Clutters/</code>, reflecting their in-game organization.</li> <li><code>Data/</code>:  mining in progress </li> <li><code>Fonts/</code>: Contains fonts used by the games stored in the ttf format</li> <li><code>Glade/</code>: settings for each glades : automn, flowery,olden,summer and winter.</li> <li><code>Lang/</code>: Contains translation for many language. easy editable yml files with all translation key and the corrsponding value for each languages</li> <li><code>Luts/</code>:  mining in progress </li> <li><code>Prefabs/</code>: It contains the different kind of tree. Not the meshes but a configuration in the ron format about how to load the tree</li> <li><code>Starting-Build/</code>: This forlder contains save files that are loaded when you start a new glade</li> <li><code>Tod/</code>: acronym of time of the day, contain the light settings for every time settings</li> <li><code>Ui/</code>:  mining in progress </li> <li><code>Colors.json</code>:  mining in progress </li> </ul>"},{"location":"game-knowledge/game-structure/#manifestjson","title":"<code>Manifest.json</code>","text":"<p>To ensure assets are not corrupted, a <code>Manifest.json</code> file is included. This file contains a list of all asset paths along with their corresponding checksums. If a file is modified and its checksum does not match, the game will crash on startup.</p> <p>Info</p> <p>The game does not verify if <code>Manifest.json</code> itself is corrupted. You can manually remove entries from the manifest list or even clear the entire array to allow every assets modifications.  </p>"},{"location":"game-knowledge/game-structure/#additional-resources","title":"Additional Resources","text":"<ul> <li>Rust Programming Language</li> <li>Bevy Engine GitHub</li> <li>FMOD API Reference</li> </ul>"},{"location":"game-knowledge/meshes/","title":"Mesh Rendering","text":"<p>In Tiny Glade, meshes are the 3D representations of all objects in the game, including decorations, clutter, and other elements.  </p>"},{"location":"game-knowledge/meshes/#mesh-storage-and-format","title":"Mesh Storage and Format","text":"<p>Meshes are stored as JSON files, containing arrays of points and various attributes defining their shape and behavior. These files can be found in the <code>assets/meshes</code> folder.</p>"},{"location":"game-knowledge/meshes/#managing-meshes-with-ron","title":"Managing Meshes with RON","text":"<p>A special file, <code>nani_meshes.ron</code>, lists all available meshes and provides instructions on how they are loaded into the game. This file contains attributes to control whether a mesh should be loaded or unloaded.  </p> <p>Info</p> <p>The RON format is a human-readable serialization format, making it easy to edit with any text editor. You can learn more about RON here.</p>"},{"location":"game-knowledge/meshes/#differents-kinds-of-meshes","title":"Differents kinds of meshes","text":"<p>The <code>nani_mesh.ron</code> register all meshes with their attributes ( if they have textures, or if glow for exemple). Meshes are grouped with others in subtypes with other meshes that share the sames attributes.  subsets also add or remove some attributes to their items(deprecated or useless). here is an exemple of the first subset <code>SolidVertexColor</code>. it's the most common and it regroup the basics decorators and clutters <pre><code>subset: SolidVertexColor, #(1)!\n        attribs: (\n            remove: [\"soft_normal\", \"Vertex_UV\"], #(2)!\n            add: [\n                (name: \"flags\", ty: I32), #(3)!\n            ],\n        ),\n        meshes: [ #(4)\n            (name: \"clutter/plant_pot_v1\"),\n            ....\n        ]\n</code></pre></p> <ol> <li>Name of the subset</li> <li>Removed attribute, even if they are in the mesh json file, the value is ignored while loaded.</li> <li>added atributes: the usage is not known</li> <li>the list of files without the extention that are in the subset</li> </ol> <p>Danger</p> <p>It's important to keep the same attributes if you modify. if an attribute is missing while loading it, the game will crash.</p> <p>Some meshes like tree one are missing from this list because they are loaded in prefabs</p>"},{"location":"game-knowledge/meshes/#anatomy-of-a-json-mesh","title":"Anatomy of a JSON mesh","text":""},{"location":"game-knowledge/meshes/#structure-of-a-mesh-file","title":"Structure of a Mesh File","text":"<p>Meshes in Tiny Glade are stored as JSON files, each defining a 3D object. Below is the general structure of a mesh file. Json format is readable with any text editor, like vscode or notepad++.</p> <ul> <li><code>attributes</code>: An array that defines all attributes present in the file. These attributes are required and loaded by the game.</li> <li>Attribute Values defined using the following format:</li> </ul> <pre><code>\"type\": [\n   \"int\", # (1)!\n   1 # (2)!\n  ],\n\"buffer\": [ .... ] # (3)!\n</code></pre> <ol> <li>The type of the buffer, it's often <code>int</code> or <code>float</code></li> <li>The size of the vector, vector can sort data in sevral dimentions </li> <li>The array of values is in the <code>buffer</code> property</li> </ol> <p>Here is an anatomy of a full json file. <pre><code>{\"attributes\": [\n    \"Vertex_Position\", # (1)!\n    \"Vertex_Normal\", # (2)!\n    \"Vertex_Color\", # (3)!\n    \"Vertex_UV\" # (4)!\n    ],\n    \"indices\": { # (5)!\n        \"type\": [\n            \"int\",\n            1\n        ],\n        \"buffer\": [\n            7,\n            6,\n            5,\n            ...\n        ]\n    },\n    \"Vertex_Position\": {\n        \"type\": [\n            \"float\",\n            3\n        ],\n        \"buffer\": [\n            [\n                0.33000001311302185,\n                0.0,\n                0.0\n            ]\n            ...\n        ]\n    },\n    \"Vertex_Normal\": {\n        \"type\": [\n            \"float\",\n            3\n        ],\n        \"buffer\": [\n            [\n                0.0,\n                1.0,\n                0.0\n            ]\n            ...\n        ]\n    },\n    \"Vertex_Color\": {\n        \"type\": [\n            \"float\",\n            3\n        ],\n        \"buffer\": [\n            [\n                0.1463320553302765,\n                0.2409999966621399,\n                0.12218699604272842\n            ]\n            ...\n        ]\n    },\n    \"Vertex_UV\": {\n        \"type\": [\n            \"float\",\n            2\n        ],\n        \"buffer\": [\n            [\n                0.5,\n                0.5\n            ]...\n        ]\n    }\n}\n</code></pre></p> <ol> <li><code>Vertex_Position</code> represents the position of each vertex in 3D space. It is a Vector3 composed of float values.  </li> <li><code>Vertex_Normal</code> defines the normal orientation of each vertex.  </li> <li><code>Vertex_Color</code> represents the RGB color of each vertex.</li> <li><code>Vertex_UV</code> is the 2D representation of the vertex, used by some meshes for texture mapping. Unfortunately, textures are not yet well understood. </li> <li><code>Indices</code> define the faces of the mesh. Each number represents a vertex index,and they work in groups of three. Each group of three numbers forms a triangle. Unlike <code>Vertex_Position</code>, <code>Indices</code> are stored as an array of integers, not as a Vector3. </li> </ol>"},{"location":"game-knowledge/meshes/#about-vectors","title":"About Vectors","text":"<p>Vectors in Tiny Glade follow the same coordinate system as Unity, where: - Y goes up - X goes left </p> Coordinate system comparison across different software"},{"location":"game-knowledge/meshes/#about-colors","title":"About Colors","text":"<p>Most items in the game do not use textures. Instead, each vertex's color is stored in a separate array. Each entry in this array corresponds to a vertex at the same index in the <code>Vertex_Position</code> array. Colors are represented as vectors with three float components\u2014each ranging from 0.0 to 1.0\u2014corresponding to the Red, Green, and Blue channels. For example: <code>[0.2, 0.2, 0.18039216101169586]</code>.</p> <p>Each vertex must have a corresponding color entry. This means the color array must be exactly the same size as the <code>Vertex_Position</code> array. If the sizes differ, the game will crash at startup. (The specific error message will be added here later.)</p>"},{"location":"game-knowledge/meshes/#rgb-color-basics","title":"RGB Color Basics","text":"<p>RGB stands for Red, Green, and Blue\u2014the primary colors of light used in digital displays to create all visible colors.</p> <p>Each channel (R, G, or B) can take a value from 0 to 255: - <code>0</code> means none of that color. - <code>255</code> means full intensity of that color.</p> <p>In hexadecimal (hex) notation, RGB values are written as <code>#RRGGBB</code>, where: - <code>RR</code> = Red - <code>GG</code> = Green - <code>BB</code> = Blue</p> <p>Each component is a hex number from <code>00</code> (decimal 0) to <code>FF</code> (decimal 255). Examples: - <code>#FF0000</code> = Red (255, 0, 0) - <code>#00FF00</code> = Green (0, 255, 0) - <code>#0000FF</code> = Blue (0, 0, 255) - <code>#FFFFFF</code> = White (255, 255, 255) - <code>#000000</code> = Black (0, 0, 0) - <code>#FFFF00</code> = Yellow (255, 255, 0)  </p>"},{"location":"game-knowledge/meshes/#tiny-glade-color-format","title":"Tiny Glade Color Format","text":"<p>In Tiny Glade, the same RGB principles apply, but the values are represented as floats between 0 and 1 rather than integers between 0 and 255. Additionally, the color components are stored in an array rather than a single hex string.</p> <p>For example: - <code>[1.0, 0.0, 0.0]</code> = Red - <code>[0.0, 1.0, 0.0]</code> = Green - <code>[0.0, 0.0, 1.0]</code> = Blue  </p> <p>Tip: I use the ColorHexa tool to easily convert between hex codes and RGB percentage.</p>"},{"location":"game-knowledge/meshes/#import-into-blender","title":"Import into blender","text":"<p>Reading lists of vectors in a json file can be very tought. We create a Blender add on to allow import and export of json File. You can download the add on here. learn more in the Tiny Glade Blender AddOn</p>"},{"location":"game-knowledge/meshes/sheeps/","title":"Sheep","text":"<p>Sheep are the most iconic and adorable creatures in Tiny Glade. They wander peacefully around your buildings and love being petted. Under the hood, their behavior and animation system are implemented in a very unique way.</p> <p></p>"},{"location":"game-knowledge/meshes/sheeps/#meshes","title":"Meshes","text":"<p>The sheep's 3D models (meshes) are located in the <code>meshes/sheep_animation</code> folder. There are 31 separate mesh files used for animations:</p> <ul> <li>30 files for the walking animation, named <code>1.json</code> through <code>30.json</code></li> <li>1 file for the petting animation, named <code>delighted.json</code></li> </ul> <p>Info</p> <p>The <code>1.json</code> mesh is also used for the idle animation.</p> <p>Each mesh file contains a standard set of meshes attributes: - <code>Vertex_Position</code>: the 3D coordinates of each vertex - <code>Vertex_Normal</code>: the direction each vertex is facing  - <code>Vertex_Color</code>: the color of each vertex</p>"},{"location":"game-knowledge/meshes/sheeps/#animation","title":"Animation","text":"<p>The sheep animation system works by switching between mesh frames:</p> <ul> <li>Idle state: The sheep remains on the <code>1.json</code> mesh.</li> <li>Walking state: The sheep cycles through the 30 walking frames (<code>1.json</code> to <code>30.json</code>) in a loop, creating the illusion of movement.</li> <li>Petting state: When the player pets a sheep, its mesh switches to <code>delighted.json</code>, showing a happy reaction.</li> </ul> <p>the original animation last 30 frame but you don't have to make yours last that long, you can loop through your frames to create a shorter one. but it require the 30 files to work properly if not, the game crash at startup.</p>"},{"location":"game-knowledge/meshes/sheeps/#technical-constraints","title":"\ud83d\udd27 Technical Constraints","text":"<p>For the animation to work properly, all meshes must meet strict structural requirements:</p> <ul> <li>They must have the exact same number of vertices.</li> <li>The vertices must be listed in the same order across all meshes.</li> </ul> <p>This is crucial because the animation system interpolates between vertex positions over time. If the vertex count or order differs between frames, the animation will break or cause visual artifacts.  </p> <p> </p> <p>if the number of vertex is not even between models you will get the following error : <pre><code>ERROR [tiny_glade::panic_reporter] [frame:0] PANIC: panicked at crates/country-core/src/startup/startup_sheep.rs:98:21:\nindex out of bounds: the len is 860 but the index is 860\n</code></pre></p> <p>where the <code>860</code> is the length of your shortest mesh</p> <p>Danger</p> <p>If you're exporting or modifying sheep meshes in Blender: Make sure the export script does not reorder the vertex list.  </p>"},{"location":"game-knowledge/meshes/sheeps/#version-notes","title":"Version Notes","text":"<ul> <li>Versions \u2264 1.13: Each mesh must contain exactly 860 vertices.  </li> <li>Version \u2265 1.14: This limitation has been lifted. Meshes can have any vertex count, as long as it's consistent across all animation frames.</li> </ul>"},{"location":"modding-tools/installing-packs/","title":"How to Install Asset Packs","text":"<p>Tiny Glade includes many assets that you can modify to change the look and feel of your game. Asset packs are collections of these modified files, letting you customize things like: - Decorations and clutter - Entities (sheep, ducks, etc.) - Trees - Seasonal settings  </p> <p>Asset packs replace existing game files and are loaded when the game starts.</p> <p>Warning</p> <p>Asset files are protected! The game uses a file called <code>build-info/manifest.json</code> to check if assets have been changed. If you modify any asset, the game will refuse to start unless you update or clear the manifest. See below for how to clean the Manifest file.</p>"},{"location":"modding-tools/installing-packs/#installation-methods","title":"Installation Methods","text":"<p>There are two ways to install custom assets: - Manual installation - Automatic installation (using Whiterun)</p>"},{"location":"modding-tools/installing-packs/#manual-installation","title":"Manual Installation","text":""},{"location":"modding-tools/installing-packs/#1-clearing-the-manifest-file","title":"1. Clearing the Manifest File","text":"<p>The <code>manifest.json</code> file stores a hash for every game file, preventing unauthorized changes or file corruption. A typical entry looks like:</p> <pre><code>[\n  \"default_settings.ron\",\n  \"db6f245b9ab982c11191a4bbd7288267d879b530b5b052ca8ed8b5299b16ee91\"\n]\n</code></pre> <p>Good news: The manifest does not check itself, so you can safely edit or clear it. To allow modding, simply remove all entries from the manifest. Here\u2019s a blank manifest you can use (or download it here):  </p> <pre><code>{\n  \"version\": 1,\n  \"files\": []\n}\n</code></pre> <p>This disables the file check, letting you use your custom assets. (But beware: the game may crash if your assets are broken!)</p> <p>Danger</p> <p>Modding is fun but risky! - Always back up your saves before experimenting. - If the game asks to send a crash report, say no to avoid annoying the dev teams (but you can share logs on Discord\u2019s #modding channel, click on details, open <code>log.txt</code> and scroll to the bottom).  - The manifest is reset after every game update, so check it regularly!</p>"},{"location":"modding-tools/installing-packs/#2-installing-the-asset-pack","title":"2. Installing the Asset Pack","text":"<ol> <li>Extract the new asset pack (usually a ZIP file).</li> <li>Copy the new <code>assets</code> folder into your game directory, replacing existing files if prompted.</li> <li>Start the game and enjoy your new content!</li> </ol>"},{"location":"modding-tools/installing-packs/#automatic-installation","title":"Automatic Installation","text":"<p> You can use the Whiterun tool to automate the process:</p> <ol> <li>Download Whiterun from GitHub (Requires Java 24 to run)</li> <li>Open Whiterun and patch your game (this will clear the manifest for you).</li> <li>Click \"Add asset pack\" and move your ZIP file (do not extract) into the folder.</li> <li>The pack should appear in the list.    Click on it, then click \"Install\".</li> <li>Start the game and enjoy!</li> </ol>"},{"location":"modding-tools/installing-packs/#recovering-from-problems","title":"Recovering from Problems","text":"<p>If you want to restore the default game or if something breaks. 1. go one the Tiny Glade steam page in your library 2. click on the cog at the right and in the dropdown menu click on properties  3. On the pop-up go to \"installed files\" menu and click on \"verify integrity\" </p>"},{"location":"modding-tools/installing-packs/#need-help","title":"Need Help?","text":"<ul> <li>Join the Tiny Glade Discord (accessible inside the game) for help and sharing mods.</li> <li>You can find mods in the Reddit community.</li> </ul> <p>Happy tinkering!</p>"},{"location":"modding-tools/tiny-glade-blender-add-on/","title":"Tiny Glade Blender Add On","text":"<p>This Blender add on add importation and exportation feature for Iiny Glades meshes.</p>"},{"location":"modding-tools/tiny-glade-blender-add-on/#installation","title":"Installation","text":"<p>pre-requis, blender. download the python script from github</p> <p>Open Blender go to -&gt; Edit -&gt; Preferences -&gt; Add-ons -&gt; top right arrow down button -&gt; Install from Disk -&gt; select \"tiny_glade_json_io.py\" -&gt; click \"Install from Disk\" bottom right</p> <p>don't forget to enable it if not.</p> <p>The addon is installed</p>"},{"location":"modding-tools/tiny-glade-blender-add-on/#importation","title":"importation","text":""},{"location":"modding-tools/tiny-glade-blender-add-on/#exportation","title":"Exportation","text":""}]}