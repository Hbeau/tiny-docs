{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tiny Glade modding documentation","text":"<p>Tiny Glade is a small diorama builder where you doodle whimsical castles, cozy cottages &amp; romantic ruins. Explore gridless building chemistry as the game adorns your glades with procedural detail. No management, combat or goals: just kick back and turn forgotten meadows into lovable dioramas.  </p> <p>Tiny Glade, developed and published by Pounce Light, was released on September 23, 2024. The game is crafted using the Rust programming language and utilizes the Bevy engine.  </p> <p>Currently, there is no official mod support. However, an active modding community thrives on the game's Discord server. To join and engage with fellow modders, you can access the Discord server through the in-game menu. And a Reddit to get news about discoveries and developments.</p>"},{"location":"#game-knowledge","title":"Game Knowledge","text":"<p>We gather all our knowlege about the game mecanics below we dig so far - the overall Game Structure - The display of the Meshes - The way how Glade are saved </p>"},{"location":"#modding-tools","title":"Modding Tools","text":""},{"location":"#contact-and-contribution","title":"Contact and Contribution","text":""},{"location":"game-knowledge/game-structure/","title":"Game Structure","text":""},{"location":"game-knowledge/game-structure/#how-it-works","title":"How It Works","text":"<p>The game is developed in Rust and utilizes the Bevy engine (Bevy Engine). The music is managed with FMOD (FMOD Documentation), which allows for evolutive and dynamic soundscapes.</p>"},{"location":"game-knowledge/game-structure/#game-files","title":"Game Files","text":"<p>The main executable file is <code>TinyGlade.exe</code>. This binary contains the compiled Rust code where all the magic happens.</p>"},{"location":"game-knowledge/game-structure/#assets-folder","title":"<code>Assets</code> Folder","text":"<p>The <code>Assets</code> folder contains all the necessary game resources, organized into subdirectories:</p> <ul> <li><code>Audio/</code>: This directory holds the game\u2019s music and sound effects. The files are in an bank format, they are openable with the fmod studio free for small organization &lt; $200k.</li> <li><code>Meshes/</code>: This directory contains all the 3D models used in the game. The assets are categorized into subfolders such as <code>Decorations/</code> and <code>Clutters/</code>, reflecting their in-game organization.</li> <li><code>Data/</code>:  mining in progress </li> <li><code>Fonts/</code>: Contains fonts used by the games stored in the ttf format</li> <li><code>Glade/</code>: settings for each glades : automn, flowery,olden,summer and winter.</li> <li><code>Lang/</code>: Contains translation for many language. easy editable yml files with all translation key and the corrsponding value for each languages</li> <li><code>Luts/</code>:  mining in progress </li> <li><code>Prefabs/</code>:  mining in progress </li> <li><code>Starting-Build/</code>: This forlder contains save files that are loaded when you start a new glade</li> <li><code>Tod/</code>: acronym of time of the day, contain the light settings for every time settings</li> <li><code>Ui/</code>:  mining in progress </li> <li><code>Colors.json</code>:  mining in progress </li> </ul>"},{"location":"game-knowledge/game-structure/#manifestjson","title":"<code>Manifest.json</code>","text":"<p>To ensure assets are not corrupted, a <code>Manifest.json</code> file is included. This file contains a list of all asset paths along with their corresponding checksums. If a file is modified and its checksum does not match, the game will crash on startup.</p> <p>Info</p> <p>The game does not verify if <code>Manifest.json</code> itself is corrupted. You can manually remove entries from the manifest list or even clear the entire array to allow every assets modifications.  </p>"},{"location":"game-knowledge/game-structure/#additional-resources","title":"Additional Resources","text":"<ul> <li>Rust Programming Language</li> <li>Bevy Engine GitHub</li> <li>FMOD API Reference</li> </ul>"},{"location":"game-knowledge/meshes/","title":"Mesh Rendering","text":"<p>In Tiny Glade, meshes are the 3D representations of all objects in the game, including decorations, clutter, and other elements.  </p>"},{"location":"game-knowledge/meshes/#mesh-storage-and-format","title":"Mesh Storage and Format","text":"<p>Meshes are stored as JSON files, containing arrays of points and various properties defining their shape and behavior. These files can be found in the <code>assets/meshes</code> folder.</p>"},{"location":"game-knowledge/meshes/#managing-meshes-with-ron","title":"Managing Meshes with RON","text":"<p>A special file, <code>nani_meshes.ron</code>, lists all available meshes and provides instructions on how they are loaded into the game. This file contains properties to control whether a mesh should be loaded or unloaded.  </p> <p>Info</p> <p>The RON format is a human-readable serialization format, making it easy to edit with any text editor. You can learn more about RON here.</p>"},{"location":"game-knowledge/meshes/#anatomy-of-a-json-mesh","title":"Anatomy of a JSON mesh","text":""},{"location":"game-knowledge/meshes/#structure-of-a-mesh-file","title":"Structure of a Mesh File","text":"<p>Meshes in Tiny Glade are stored as JSON files, each defining a 3D object. Below is the general structure of a mesh file. Json format is readable with any text editor, like vscode or notepad++.</p> <ul> <li><code>attributes</code>: An array that defines all attributes present in the file. These attributes are required and loaded by the game.</li> <li>Attribute Values defined using the following format:</li> </ul> <pre><code>\"type\": [\n   \"int\", # (1)!\n   1 # (2)!\n  ],\n\"buffer\": [ .... ] # (3)!\n</code></pre> <ol> <li>The type of the buffer, it's often <code>int</code> or <code>float</code></li> <li>The size of the vector, vector can sort data in sevral dimentions </li> <li>The array of values </li> </ol> <p>Here is an anatomy of a full json file. <pre><code>{\"attributes\": [\n    \"Vertex_Position\", # (1)!\n    \"Vertex_Normal\", # (2)!\n    \"Vertex_Color\", # (3)!\n    \"Vertex_UV\" # (4)!\n    ],\n    \"indices\": { # (5)!\n        \"type\": [\n            \"int\",\n            1\n        ],\n        \"buffer\": [\n            7,\n            6,\n            5,\n            ...\n        ]\n    },\n    \"Vertex_Position\": {\n        \"type\": [\n            \"float\",\n            3\n        ],\n        \"buffer\": [\n            [\n                0.33000001311302185,\n                0.0,\n                0.0\n            ]\n            ...\n        ]\n    },\n    \"Vertex_Normal\": {\n        \"type\": [\n            \"float\",\n            3\n        ],\n        \"buffer\": [\n            [\n                0.0,\n                1.0,\n                0.0\n            ]\n            ...\n        ]\n    },\n    \"Vertex_Color\": {\n        \"type\": [\n            \"float\",\n            3\n        ],\n        \"buffer\": [\n            [\n                0.1463320553302765,\n                0.2409999966621399,\n                0.12218699604272842\n            ]\n            ...\n        ]\n    },\n    \"Vertex_UV\": {\n        \"type\": [\n            \"float\",\n            2\n        ],\n        \"buffer\": [\n            [\n                0.5,\n                0.5\n            ]...\n        ]\n    }\n}\n</code></pre></p> <ol> <li><code>Vertex_Position</code> represents the position of each vertex in 3D space. It is a Vector3 composed of float values.  </li> <li><code>Vertex_Normal</code> defines the normal orientation of each vertex.  </li> <li><code>Vertex_Color</code> represents the RGB color of each vertex. It is a Vector3 where each component is a float between 0 and 1, corresponding to the red, green, and blue color channels.  </li> <li><code>Vertex_UV</code> is the 2D representation of the vertex, used by some meshes for texture mapping. Unfortunately, textures are not yet well understood. </li> <li><code>Indices</code> define the faces of the mesh. Each number represents a vertex index,and they work in groups of three. Each group of three numbers forms a triangle. Unlike <code>Vertex_Position</code>, <code>Indices</code> are stored as an array of integers, not as a Vector3. </li> </ol>"},{"location":"game-knowledge/meshes/#about-vectors","title":"About Vectors","text":"<p>Vectors in Tiny Glade follow the same coordinate system as Unity, where: - Y goes up - X goes left </p> Coordinate system comparison across different software"},{"location":"game-knowledge/meshes/#import-into-blender","title":"Import into blender","text":"<p>Reading lists of vectors in a json file can be very tought. We create a Blender add on to allow import and export of json File. You can download the add on here. learn more in the Tiny Glade Blender AddOn</p>"},{"location":"modding-tools/tiny-glade-blender-add-on/","title":"Tiny Glade Blender Add On","text":"<p>This Blender add on add importation and exportation feature for Iiny Glades meshes.</p>"},{"location":"modding-tools/tiny-glade-blender-add-on/#installation","title":"Installation","text":"<p>pre-requis, blender. download the python script from github</p> <p>Open Blender go to -&gt; Edit -&gt; Preferences -&gt; Add-ons -&gt; top right arrow down button -&gt; Install from Disk -&gt; select \"tiny_glade_json_io.py\" -&gt; click \"Install from Disk\" bottom right</p> <p>don't forget to enable it if not.</p> <p>The addon is installed</p>"},{"location":"modding-tools/tiny-glade-blender-add-on/#importation","title":"importation","text":""},{"location":"modding-tools/tiny-glade-blender-add-on/#exportation","title":"Exportation","text":""}]}